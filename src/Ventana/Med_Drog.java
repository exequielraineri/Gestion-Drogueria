/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventana;

import Clases.Medicamento;
import Conexion.Conexion;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import sistema_drogueria.Home;
import static sistema_drogueria.Home.con;

/**
 *
 * @author ADMIN
 */
public class Med_Drog extends javax.swing.JFrame {

    PreparedStatement pstm;
    ResultSet rs;
    DefaultTableModel model;
    Medicamento med;

    public Med_Drog(int idMed) {
        initComponents();
        setVisible(true);
        con =new Conexion(Home.getUser(),Home.getPass());
        setLocationRelativeTo(null);
        med = obtenerMedicamento(idMed);
        lblMedicamento.setText(med.getMed_nombre());
        mostrarTabla(tableDrogaOriginal);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableDrogaPorMedicamento = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableDrogaOriginal = new javax.swing.JTable();
        btnGuardar = new javax.swing.JButton();
        btnAgregarDroga = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lblMedicamento = new javax.swing.JLabel();
        btnQuitarDroga1 = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(700, 550));
        setResizable(false);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tableDrogaPorMedicamento.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Cantidad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableDrogaPorMedicamento.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableDrogaPorMedicamento);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 280, 630, 160));

        tableDrogaOriginal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Cantidad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableDrogaOriginal.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tableDrogaOriginal);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 630, 160));

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        jPanel1.add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 450, 160, 40));

        btnAgregarDroga.setText("Agregar");
        btnAgregarDroga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarDrogaActionPerformed(evt);
            }
        });
        jPanel1.add(btnAgregarDroga, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 220, 160, 40));

        jLabel1.setText("Agregue las dorgas que contiene el medicamento ->");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 440, 20));

        lblMedicamento.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jPanel1.add(lblMedicamento, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 10, 330, 20));

        btnQuitarDroga1.setText("Quitar");
        btnQuitarDroga1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarDroga1ActionPerformed(evt);
            }
        });
        jPanel1.add(btnQuitarDroga1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, 160, 40));

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed

        guardarDrogaBD();

    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnAgregarDrogaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarDrogaActionPerformed

        AsignarDrogaAlMedicamento();


    }//GEN-LAST:event_btnAgregarDrogaActionPerformed

    private void btnQuitarDroga1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarDroga1ActionPerformed
        // TODO add your handling code here:
        if (tableDrogaPorMedicamento.getSelectedRow() != -1) {
            DefaultTableModel mm = (DefaultTableModel) tableDrogaPorMedicamento.getModel();
            if (Integer.parseInt(mm.getValueAt(tableDrogaPorMedicamento.getSelectedRow(), 2).toString()) == 0) {
                mm.removeRow(tableDrogaPorMedicamento.getSelectedRow());

            } else {
                mm.setValueAt(Integer.parseInt(mm.getValueAt(tableDrogaPorMedicamento.getSelectedRow(), 2).toString()) - 1, tableDrogaPorMedicamento.getSelectedRow(), 2);
                sumarTablaOriginal(Integer.parseInt(mm.getValueAt(tableDrogaPorMedicamento.getSelectedRow(), 0).toString()), mm);

            }

            tableDrogaPorMedicamento.setModel(mm);
        }
    }//GEN-LAST:event_btnQuitarDroga1ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarDroga;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnQuitarDroga1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblMedicamento;
    private javax.swing.JTable tableDrogaOriginal;
    private javax.swing.JTable tableDrogaPorMedicamento;
    // End of variables declaration//GEN-END:variables

    public void borrarTabla(JTable tabla) {

        model = (DefaultTableModel) tabla.getModel();
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }

    }

    private void mostrarTabla(JTable tabla) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        try {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            //con = new Conexion();
            borrarTabla(tabla);
            model = (DefaultTableModel) tabla.getModel();

            pstm = con.getConnection().prepareStatement("select * from droga");
            rs = pstm.executeQuery();
            Object[] fila = new Object[3];
            while (rs.next()) {
                fila[0] = rs.getInt("droga_ID");
                fila[1] = rs.getString("droga_nombre");
                fila[2] = rs.getInt("droga_cantidad");
                model.addRow(fila);
            }
            tabla.setModel(model);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        } finally {
            try {
                //con.desconectar();
                pstm.close();
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);

            }

        }

    }

    private Object[] existeDrogaEnMedicamento(Object id) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.

        Object[] droga = new Object[3];
        DefaultTableModel m = (DefaultTableModel) tableDrogaPorMedicamento.getModel();
        for (int i = 0; i < m.getRowCount(); i++) {
            if (id == m.getValueAt(i, 0)) {
                droga[0] = m.getValueAt(i, 0);
                droga[1] = m.getValueAt(i, 1);
                droga[2] = m.getValueAt(i, 2);
            }
        }

        return droga;
    }

    private void AsignarDrogaAlMedicamento() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.

        if (tableDrogaOriginal.getSelectedRow() != -1) {
            int filaNumero = tableDrogaOriginal.getSelectedRow();
            DefaultTableModel m = (DefaultTableModel) tableDrogaOriginal.getModel();
            int idDroga = (int) m.getValueAt(filaNumero, 0);
            restarTablaOriginal(filaNumero);
            sumarTablaAgregado(idDroga, m);

        } else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar para agregar");
        }

    }

    private Medicamento obtenerMedicamento(int idMed) {
        Medicamento m = new Medicamento();
        try {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            String consulta = "select * from medicamento where med_id=" + idMed;
            PreparedStatement p = con.getConnection().prepareStatement(consulta);
            ResultSet r = p.executeQuery();
            if (r.next()) {
                m.setMed_id(idMed);
                m.setMed_nombre(r.getString("med_nombre"));
                m.setMed_cantidad(rs.getInt("med_cantidad"));
                m.setMed_precio(r.getFloat("med_precio"));
                m.setMed_ptoRepos(r.getInt("med_PtoRepos"));
            }
            return m;
        } catch (SQLException ex) {
            Logger.getLogger(Med_Drog.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            return m;
        }

    }

    private void restarTablaOriginal(int filaNumero) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        DefaultTableModel m = (DefaultTableModel) tableDrogaOriginal.getModel();
        int valor = Integer.parseInt(m.getValueAt(filaNumero, 2).toString());
        m.setValueAt(valor - 1, filaNumero, 2);
        tableDrogaOriginal.setModel(m);
    }

    private void sumarTablaAgregado(int idDroga, DefaultTableModel mOriginal) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        DefaultTableModel m = (DefaultTableModel) tableDrogaPorMedicamento.getModel();
        int valor = 0;
        int filaEncontrada = -1;
        for (int i = 0; i < m.getRowCount(); i++) {
            if (Integer.parseInt(m.getValueAt(i, 0).toString()) == idDroga) {//pregunto si el iddroga de la tabla 1, existe en la tabla 2
                valor = Integer.parseInt(m.getValueAt(i, 2).toString()) + 1;
                filaEncontrada = i;
                System.out.println(i);
            }
        }
        if (filaEncontrada == -1) {
            Object[] nuevo = new Object[3];
            nuevo[0] = idDroga;
            nuevo[1] = mOriginal.getValueAt(tableDrogaOriginal.getSelectedRow(), 1);
            nuevo[2] = 1;
            m.addRow(nuevo);
            tableDrogaPorMedicamento.setModel(m);
        } else {
            m.setValueAt(valor, filaEncontrada, 2);
            tableDrogaPorMedicamento.setModel(m);
        }

    }

    private void sumarTablaOriginal(int idDroga, DefaultTableModel mOriginal) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        DefaultTableModel m = (DefaultTableModel) tableDrogaOriginal.getModel();
        int valor = 0;
        int filaEncontrada = -1;
        System.out.println("m.getRowCount() = " + m.getRowCount());
        System.out.println(" -->" + m.getDataVector().toString());

        for (int i = 0; i < m.getRowCount(); i++) {
            if (Integer.parseInt(m.getValueAt(i, 0).toString()) == idDroga) {//pregunto si el iddroga de la tabla 1, existe en la tabla 2
                valor = Integer.parseInt(m.getValueAt(i, 2).toString()) + 1;
                filaEncontrada = i;
                System.out.println(i);
            }
        }
        if (filaEncontrada == -1) {
            Object[] nuevo = new Object[3];
            nuevo[0] = idDroga;
            nuevo[1] = mOriginal.getValueAt(tableDrogaPorMedicamento.getSelectedRow(), 1);
            nuevo[2] = 1;
            m.addRow(nuevo);
            tableDrogaOriginal.setModel(m);
        } else {
            m.setValueAt(valor, filaEncontrada, 2);
            tableDrogaOriginal.setModel(m);
        }
    }

    private void guardarDrogaBD() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        try {
            //con = new Conexion();
            String insert = "Insert into med_droga(cod_droga,cod_med,cantidad) values(?,?,?)";
            String upd = "update droga set droga_cantidad=droga_cantidad-? where droga_id=?";
            DefaultTableModel m = (DefaultTableModel) tableDrogaPorMedicamento.getModel();
            pstm = con.getConnection().prepareStatement(insert);

            for (int i = 0; i < m.getRowCount(); i++) {
                PreparedStatement ps = con.getConnection().prepareStatement(upd);
                ps.setInt(1, Integer.parseInt(m.getValueAt(i, 2).toString()));
                ps.setInt(2, Integer.parseInt(m.getValueAt(i, 0).toString()));
                pstm.setInt(1, Integer.parseInt(m.getValueAt(i, 0).toString()));
                pstm.setInt(2, med.getMed_id());
                pstm.setInt(3, Integer.parseInt(m.getValueAt(i, 2).toString()));
                ps.executeUpdate();
                pstm.executeUpdate();
            }
            JOptionPane.showMessageDialog(null, "Se guardo correctamente");
            borrarTabla(tableDrogaPorMedicamento);

        } catch (SQLException ex) {
            Logger.getLogger(Med_Drog.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

}
